#lang sicp
(define (even? x)
  (= (remainder x 2) 0))

(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (yk k)
    (f (+ a (* k h))))
  (define (simpson-iter n)
    (cond ((= n 0) (+ (yk n) (yk 0)))
          ((even? n) (+ (* 2 (yk n)) (simpson-iter (- n 1))))
          (else (+ (* 4 (yk n)) (simpson-iter (- n 1))))))
  (* (/ h 3) (simpson-iter n)))


(define (cube x)
  (* x x x))

"fengexian"

(define (sum-func f next a b)
  (if (> a b)
      0
      (+ (f a) (sum-func f (next a) b))))

