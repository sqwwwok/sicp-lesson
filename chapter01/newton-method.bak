#lang sicp
(define (fixed-point f first-guess)
  (define limit 0.000001)
  (let ((next-guess (f first-guess)))
    (if (< (abs (- next-guess first-guess)) limit)
        next-guess
        (fixed-point f next-guess))))

(define (deriv f)
  (define dx 0.000001)
  (lambda (x)
    (/ (- (f (+ x dx)) (f x)) dx)))

(define (newton-transform f)
  (lambda (x)
    (- x (/ (f x) ((deriv f) x)))))

(define (newton-method f)
  (fixed-point (newton-transform f) 1.0))

;ffffffffffffffffffffffffffffffffffffffffffffffffffff1.40
(define cube
  (lambda (x)
    (* x x x)))

(define square
  (lambda (x)
    (* x x)))

(define (cubic a b c)
  (lambda (x)
    (+ (* a (cube x))
       (* b (square x))
       c)))

;fffffffffffffffffffffffffffffffffffffffffffffffffffff1.41
(define (double f)
  (lambda (x)
    (f (f x))))
























